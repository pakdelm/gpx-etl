# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI Pipeline

on:
  push:
    branches: [ "5-create-cicd-pipeline-by-github-actions" ] # test
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    # check out repo and set up python
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    # install and configure poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    # install dependencies if cache does not exist
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev,test --no-interaction --no-root
    # lint
    - name: Ruff linter
      run: |
        poetry run ruff . --verbose
    # check typing
    - name: Mypy typing
      run: |
        poetry run mypy -p gpx-etl
    # check formatting
    - name: Black formatting
      run: |
        poetry run black --check gpx-etl
    # run test suite
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        poetry run pytest --cov-report term-missing --cov=gpx-etl tests/
